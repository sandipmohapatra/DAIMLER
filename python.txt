https://www.online-python.com/online_python_compiler
------------------------------------------------------------------------
Data types in Python
---------------------------------
1)int
2)float
3)complex
4)bool
5)str
6)byte
7)bytearray
8)range
9)list
10)tuple
11)set
12)frozenset
13)dict
14)None
------------------------------------------------------------------
list:-
example 1
------------------
list1 = [1, 2, "Python", "Program", 15.9,10,10.32]      
list2 = ["Amy", "Ryan", "Henry", "Emma"]    
 
print(list1)  
print(list2)  
   
print(type(list1))  
print(type(list2))  
---------------------------------------------
1)it will display in the same order
2)heterogeneous objects are allowed
3)duplicate data is allowed
4)growable in nature
5)values should be enclosed in a square brackets.
-------------------------------------------------------------------------------------
set:-
--------------
Days = set(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])    
print(Days)    
print(type(Days))    
print("looping through the set elements ... ")    
for i in Days:    
    print(i)   
-------------------------------------------------------------
set :- If we want to display data without duplicate data then we can go for set.
1)In this insertion order is not preserved
2)dupicates are not allowed
3)hetrogeneous objects are allowed
4)index concept is not applicable
 5)growable in nature
-----------------------------------------------------------------------------------
dict :- It contain key and value pair
--------------------------------------------------------
Employee = {"Name": "sandip", "Age": 32, "salary":26000,"Company":"TCS"}        
print(type(Employee))        
print("printing Employee data .... ")        
print(Employee) 
---------------------------------------------------------------------
tuple:-
t=(10,20,30,40,50)
type(t)

tuple data type is exactly same as list data type except that it is immutable (we cannot change the value)
---------------------------------------------------------------------------------------------------
complex
-------------------------------
a=10+1.5j 
b=20+2.5j 
c=a+b 
print(c) 
o/p:- (30+4j)
---------------------------------------------------------------------
bool
--------------
b=True
type(b) 
-------------------
a=10
b=20
c=a<b
print(c)
o/p:- true
--------------------------
str
--------------------------
s1='durga'
s1="durga"
print(s1)
type(s1)
------------------------------------------------
regular expression
---------------------------
example-1
--------------------
import re  
  
# Our pattern  
pattern = "hello"  
  
# Returns a match object if found else Null  
match = re.match(pattern, "hello world")  
  
print(match) # Printing the match object  
print("Span:", match.span()) # Return the tuple (start, end)  
print("Start:", match.start()) # Return the starting index  
print("End:", match.end()) # Returns the ending index  
----------------------------------------------------------------------------------------------
example-2
-------------------
# Importing re module  
import re  
  
# Defining regEx pattern  
pattern = "amazing"  
  
# Createing a regEx object  
regex_object = re.compile(pattern)  
  
# String  
text = "This tutorial is amazing!"   
  
# Searching for the pattern in the string  
match_object = regex_object.search(text)  
  
# Output  
print("Match Object:", match_object)  
------------------------------------------------------------------------------------------------
example-3
--------------------function with single parameters-----------------------------
def lengthofString( string ):    
        return len(string)    
print( "Length of the string is: ", lengthofString( "sandip" ) )    
print( "Length of the string Python is: ", lengthofString( "Python" ) )
------------------------------------------------------------------------------------------------
example-4
--------------------------function with multiple parameters-------------------
def square( item_list ):    
     
    squares = [ ]    
    for l in item_list:    
        squares.append( l**2 )    
    return squares    

my_list = [17, 52, 8 ,7];    
my_result = square( my_list )    
print( "Squares of the list are: ", my_result )    
------------------------------------------------------------------------------------
example-5
--------------------------Dict example---------------------------------------------
Employee = {"Name": "Dev", "Age": 20, "salary":45000,"Company":"Infosys"}      
print(type(Employee))      
print("printing Employee data .... ")      
print("Name : %s" %Employee["Name"])      
print("Age : %d" %Employee["Age"])      
print("Salary : %d" %Employee["salary"])      
print("Company : %s" %Employee["Company"])   
---------------------------------------------------------------------------------------------
example-6
-----------------constructor example----------------------------------------------------
class car:  
    def __init__(self,modelname, year):  
        self.modelname = modelname  
        self.year = year 
        
    def display(self):  
        print(self.modelname,self.year)  
  
c1 = car("Toyota", 2016)  
c1.display()  
----------------------------------------------------------------------------------------------------
example-7
--------------------
class Person:  
    def __init__(self, name, age):  
        self.name = name    
        self.age = age  
        
    def greet(self):  
        print("Hello, my name is and age is " + self.name,self.age)  
       
  
person1 = Person("Ayan", 25)  
person1.greet()    
---------------------------------------------------------------------------------------------------------
example-8
-------------------
class Student: 
 
 def __init__(self,name,rollno,marks): 
     self.name=name 
     self.rollno=rollno 
     self.marks=marks 
 
 def talk(self): 
     print("Hello My Name is:",self.name) 
     print("My Rollno is:",self.rollno) 
     print("My Marks are:",self.marks) 
    
s1=Student("Durga",101,80) 
s1.talk() 
-----------------------------------------------------------------------------------------------
example-9
-------------------inheritance example---------------------------------------------------
class Animal:  
    def speak(self):  
        print("Animal Speaking")  
#child class Dog inherits the base class Animal  
class Dog(Animal):  
    def bark(self):  
        print("dog barking")  
d = Dog()  
d.bark()  
d.speak()  
----------------------------------------------------------------------------
example-10
----------------------Multi-level Inheritance-----------------------
class Animal:  
    def speak(self):  
        print("Animal Speaking")  
#The child class Dog inherits the base class Animal  
class Dog(Animal):  
    def bark(self):  
        print("dog barking")  
#The child class Dogchild inherits another child class Dog  
class DogChild(Dog):  
    def eat(self):  
        print("Eating bread...")  
d = DogChild()  
d.bark()  
d.speak()  
d.eat()  
---------------------------------------------------------------------------------------
Python Webservices
----------------------------------
step 1: !pip install requests

step 2:
import requests
api_url = "https://jsonplaceholder.typicode.com/todos/1"
response = requests.get(api_url)
response.json()
---------------------------------------------------------------------------
default URL
https://jsonplaceholder.typicode.com/todos
---------------------------------------------------------------------------
HTTP 	method	Description
----------------------------------------------------
GET			Retrieve an existing resource.
POST		Create a new resource.
PUT			Update an existing resource.
PATCH		Partially update an existing resource.
DELETE		Delete a resource.
-----------------------------------------------------------------------------------------